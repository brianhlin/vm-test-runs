#!/usr/bin/python

import glob
import os
import re
import shutil
import subprocess
import sys
import tempfile


source_tarball_name = 'osg-test-trunk.tar.bz2'

def run_command(command, shell=False):
    # Preprocess command
    if shell:
        if not isinstance(command, str):
            command = ' '.join(command)
    elif not (isinstance(command, list) or isinstance(command, tuple)):
        raise TypeError, 'Need list or tuple, got %s' % (repr(command))

    # Run and return command
    p = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, shell=shell)
    (stdout, stderr) = p.communicate()
    return (p.returncode, stdout, stderr)

def make_osg_test_source_tarball():
    # Return immediately if the source tarball seems to exist already
    if os.path.exists(source_tarball_name):
        return

    # Export osg-test from trunk@HEAD into a temporary directory
    temp_directory = tempfile.mkdtemp()
    export_directory = os.path.join(temp_directory, 'osg-test-trunk')
    command = ('svn', 'export', 'https://vdt.cs.wisc.edu/svn/software/osg-test/trunk', export_directory)
    (exit_status, stdout, stderr) = run_command(command)
    if exit_status != 0:
        print 'svn export failed with exit status %d' % exit_status
        print stdout
        print stderr
        sys.exit(1)
    svn_revision = re.search(r'^Exported revision (\d+)\.', stdout, re.MULTILINE).group(1)

    # Write Subversion revision number into the export directory
    revision_path = os.path.join(export_directory, 'svn-revision.txt')
    f = open(revision_path, 'w')
    f.write(svn_revision + '\n')
    f.close()

    # Make source tarball
    print 'Making "%s" from "%s"' % (source_tarball_name, temp_directory)
    command = ('tar', 'cjf', source_tarball_name, '--directory', temp_directory, 'osg-test-trunk')
    (exit_status, stdout, stderr) = run_command(command)
    if exit_status != 0:
        print 'tar command failed with exit status %d' % exit_status
        print stdout
        print stderr
        sys.exit(1)

    # Clean up
    shutil.rmtree(temp_directory)

def create_image(config_filename):
    f = open(config_filename, 'r')
    config_contents = f.read()
    f.close()

    serial_number = re.search(r'(\d+)', config_filename).group(1)
    image_filename = 'input-image-%s.qcow2' % (serial_number)

    if contents_to_filename.has_key(config_contents):
        print 'Linking from "%s" -> "%s"' % (contents_to_filename[config_contents], image_filename)
        os.link(contents_to_filename[config_contents], image_filename)

    else:
        image_directory = tempfile.mkdtemp()

        shutil.copy(os.path.join(svn_dir, 'run-job'), image_directory)

        input_directory = os.path.join(image_directory, 'input')
        os.mkdir(input_directory)
        shutil.copy(os.path.join(svn_dir, 'osg-test.patch'), input_directory)
        shutil.copy(os.path.join(svn_dir, 'test-changes.patch'), input_directory)
        shutil.copy(os.path.join(svn_dir, 'osg-release.patch'), input_directory)
        shutil.copy(config_filename, os.path.join(input_directory, 'osg-test.conf'))
        for rpm in glob.glob(os.path.join(svn_dir, 'osg-test-*.rpm')):
            shutil.copy(rpm, input_directory)

        if 'testsource = trunk' in config_contents:
            make_osg_test_source_tarball()
            shutil.copy(source_tarball_name, input_directory)

        os.mkdir(os.path.join(image_directory, 'output'))

        print 'Making "%s" from "%s"' % (image_filename, image_directory)
        os.system('virt-make-fs --size=10M --format=qcow2 %s %s' % (image_directory, image_filename))
        shutil.rmtree(image_directory)

        contents_to_filename[config_contents] = image_filename

# ------------------------------------------------------------------------------

if __name__ == '__main__':

    # Define paths
    svn_dir = os.getcwd()
    script_name = os.path.basename(sys.argv[0])

    # Process command-line arguments
    if len(sys.argv) != 1:
        die('usage: %s' % (script_name))

    # Write files
    contents_to_filename = {}
    for config_filename in sorted(glob.glob('osg-test-*.conf')):
        create_image(config_filename)
        os.remove(config_filename)
