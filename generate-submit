#!/usr/bin/python

import itertools
import os
import shutil
import sys
import tempfile

# ==============================================================================
# Test run variables:

REPOS = ('osg', 'osg-testing')

PACKAGES = (
                ('osg-tested-internal',),
                ('condor', 'osg-ce-condor', 'rsv'),
                ('osg-gridftp', 'edg-mkgridmap', 'rsv'),
                ('osg-se-bestman', 'rsv'),
                ('osg-voms', 'rsv'),
                ('osg-gums', 'rsv'),
               )

# ==============================================================================

SOURCE_DIR = '/home/cat/vm-test-runs'
CERT_TARBALL = '/home/cat/ca/osg-test-cert-bundle.tar.bz2'
TARGET_DIR = '/home/cat/test-run'

def set_up_run_directory():
    if os.path.exists(TARGET_DIR):
        print 'Target directory %s already exists' % (TARGET_DIR)
        print 'Please remove or rename target directory, then run again'
        sys.exit(1)
    os.mkdir(TARGET_DIR)

def start_submit_file():
    shutil.copy(os.path.join(SOURCE_DIR, 'template.sub'), os.path.join(TARGET_DIR, 'osg-test.sub'))

def append_to_submit_file(contents):
    submit_file_path = os.path.join(TARGET_DIR, 'osg-test.sub')
    submit_file = open(submit_file_path, 'a')
    submit_file.write(contents)
    submit_file.close()

def construct_io_image_filename(process):
    return 'cat-user-disk-%03d.raw' % (process)

def write_submit_lines_for(process, combo):
    repo, packages = combo

    os_image = 'cat-base-sl64-amd64-htcondor.dsk'
    io_image = construct_io_image_filename(process)

    contents = '\n'
    contents += '# Process %d: %s; %s\n' % (process, repo, ', '.join(packages))
    contents += 'vm_disk                 = %s:vda:w:raw,%s:vdb:w:raw\n' % (os_image, io_image)
    contents += 'request_disk            = 5.5GB\n'
    contents += 'transfer_input_files    = http://proxy.chtc.wisc.edu/SQUID/cat/%s,%s\n' % (os_image, io_image)
    contents += 'transfer_output_files   = %s\n' % (io_image)
    contents += 'transfer_output_remaps  = "%s = output-disk-$(CLUSTER).$(PROCESS).raw"\n' % (io_image)
    contents += 'queue\n'
    append_to_submit_file(contents)

def generate_osg_test_conf(process, combo):
    repo, packages = combo
    contents = '[Config]\n'
    contents += 'adduser = True\n'
    contents += 'dumpout = True\n'
    contents += 'verbose = True\n'
    if repo != 'osg':
        contents += 'extrarepos = %s\n' % (repo)
    contents += 'packages = %s\n' % (', '.join(packages))
    return contents
    
def create_io_image(process, combo):
    image_directory = tempfile.mkdtemp()

    shutil.copy(os.path.join(SOURCE_DIR, 'run-job'), image_directory)

    input_directory = os.path.join(image_directory, 'input')
    os.mkdir(input_directory)
    shutil.copy(CERT_TARBALL, input_directory)
    shutil.copy(os.path.join(SOURCE_DIR, 'osg-test.patch'), input_directory)
    shutil.copy(os.path.join(SOURCE_DIR, 'test-changes.patch'), input_directory)
    shutil.copy(os.path.join(SOURCE_DIR, 'osg-release.patch'), input_directory)

    conf_path = os.path.join(input_directory, 'osg-test.conf')
    conf_file = open(conf_path, 'w')
    conf_file.write(generate_osg_test_conf(process, combo))
    conf_file.close()

    os.mkdir(os.path.join(image_directory, 'output'))

    image_filename = construct_io_image_filename(process)
    image_path = os.path.join(TARGET_DIR, image_filename)
    print 'Making "%s" from "%s"' % (image_filename, image_directory)
    os.system('virt-make-fs --size=1M %s %s 2>/dev/null' % (image_directory, image_path))
    shutil.rmtree(image_directory)


# ------------------------------------------------------------------------------
# MAIN
# ------------------------------------------------------------------------------

if __name__ == '__main__':
    set_up_run_directory()
    start_submit_file()
    process = 0
    for combo in itertools.product(REPOS, PACKAGES):
        write_submit_lines_for(process, combo)
        create_io_image(process, combo)
        process += 1
