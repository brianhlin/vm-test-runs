#!/usr/bin/env python
# (ignore bad script name) pylint: disable=C0103
"""
A script for moving OSG VM Universe tests from a temporary directory to AFS.
Designed to be run from cron and includes safety features such as a timeout,
locking, and email notifications on failure.
"""

import safe_cron_job

import os
import glob
import shutil
import datetime
import errno
import sys
from optparse import OptionParser

########################################################################
# Defaults
DEFAULT_DEST_DIR = '/p/vdt/public/html/tests'
DEFAULT_SOURCE_DIR = '/scratch/osg/vmu-test-results'
DEFAULT_NOTIFY_ADDRS = ['matyas@cs.wisc.edu', 'blin@cs.wisc.edu']
DEFAULT_TIMEOUT_MINS = 60
DEFAULT_LOCKFILE_PATH = os.path.join(os.getenv('HOME'), '.move-job-output-to-afs.lock')
DEFAULT_DATE_FORMAT = '%Y%m%d-%H%M'
#
########################################################################

def errmsg(text, *args, **kwargs):
    "Print a message to stderr"
    return sys.stderr.write(text + '\n', *args, **kwargs)

def get_options(argv):
    "Parse, validate, and transform command-line options"
    parser = OptionParser("%prog [options]\n")

    parser.add_option("--source-dir", metavar="PATH", default=DEFAULT_SOURCE_DIR,
                      help="Where to move job output data from")
    parser.add_option("--dest-dir", metavar="PATH", default=DEFAULT_DEST_DIR,
                      help="Where to move job output data to")
    parser.add_option_group(safe_cron_job.get_cron_job_parser_group(parser, DEFAULT_TIMEOUT_MINS, DEFAULT_LOCKFILE_PATH))
    options = parser.parse_args(argv[1:])[0] # raises SystemExit(2) on error

    return options


class MoveError(Exception):
    def __init__(self, run, message):
        Exception.__init__(self)
        self.run = run
        self.message = message

    def __str__(self):
        return "Move error for %s: %s" % (self.run, str(self.message))

def move_runs(source_dir, dest_dir):
    """Copy all the run directories from 'source_dir' to 'dest_dir'.
    Run directories under source_dir are named 20YYmmdd-HHMM (i.e. a timestamp).

    """
    num_errors = 0
    num_copied = 0
    # all run directories under source_dir are named 20YYmmdd-HHMM
    run_dirs = glob.glob(os.path.join(source_dir, "20*-*"))
    for run_dir in run_dirs:
        try:
            if not os.path.isdir(run_dir):
                continue
            run_dir_base = os.path.basename(run_dir)
            run_dir_dest = os.path.join(dest_dir, run_dir_base)
            if os.path.exists(run_dir_dest):
                # Assuming a half-finished copy. Move it out of the way.
                backup_path = run_dir_dest + '.move-save'
                try:
                    if os.path.exists(backup_path):
                        shutil.rmtree(backup_path)
                    os.rename(run_dir_dest, backup_path)
                except EnvironmentError, err:
                    raise MoveError(run_dir, "Backup of %s to %s failed: %s" % (run_dir_dest, backup_path, str(err)))

            try:
                shutil.copytree(run_dir, run_dir_dest)
            except (shutil.Error, EnvironmentError), err:
                raise MoveError(run_dir, "Copy failed: %s" % str(err))
            try:
                shutil.rmtree(run_dir)
            except EnvironmentError, err:
                raise MoveError(run_dir, "Removal failed: %s" % str(err))
        except MoveError, err:
            errmsg(str(err))
            num_errors += 1
            continue
        num_copied += 1

    print "%d dir(s) were copied successfully." % num_copied
    print "%d dir(s) could not be copied." % num_errors

    create_latest_symlinks(dest_dir)
    
    if num_errors:
        return 1
    return 0

def create_latest_symlinks(dest_dir):
    """
    Find the latest automated and manual test runs and create symlinks to their
    results html files.
    """
    # all run directories under source_dir are named 20YYmmdd-HHMM
    run_dirs = glob.glob(os.path.join(dest_dir, "20*-*"))
    run_dirs = map(os.path.basename, run_dirs)
    latest = datetime.datetime(1970, 01, 01, 0, 0)
    latest_manual = datetime.datetime(1970, 01, 01, 0, 0)
    for run_dir in run_dirs:
        run_datetime = datetime.datetime.strptime(run_dir, DEFAULT_DATE_FORMAT)
        if os.path.exists(os.path.join(run_dir, 'manual_run')) and run_datetime > latest_manual:
            latest_manual = run_datetime
            latest_manual_dir = run_dir
        elif run_datetime > latest:
            latest_dir = run_dir
            latest = run_datetime

    create_symlink(latest_dir, dest_dir, 'latest.html')
    create_symlink(latest_manual_dir, dest_dir, 'latest_manual.html')

def create_symlink(run_dir, dest_dir, dest_file):
    "Safely create symlink to results html"
    link_src = os.path.join(dest_dir, run_dir, 'results.html')
    dest_path = os.path.join(dest_dir, dest_file)
    
    try:
        os.unlink(dest_path)
    except OSError, e:
        if e.errno != errno.ENOENT:
            raise e
    os.symlink(link_src, dest_path)

def main():
    """A wrapper around the rest of the logic to make sure this script can be
    safely used as a cron job"""
    script_name = os.path.basename(sys.argv[0])

    options = get_options(sys.argv)
    safe_cron_job_wrapper = \
        safe_cron_job.make_wrapper_from_options(options,
                                                default_notify=DEFAULT_NOTIFY_ADDRS,
                                                script_name=script_name)

    return safe_cron_job_wrapper.wrap_main(move_runs, options.source_dir, options.dest_dir)

if "__main__" == __name__:
    sys.exit(main())

