#!/usr/bin/python
'''A script that takes a VMU test run directory and generates results in HTML'''

import re
import os
import sys
import string
import yaml
import vmu
from taglib import Html, Tag
from glob import glob

VMU_TESTS_URL = "http://vdt.cs.wisc.edu/tests/"
OS_TRANSLATION = {'centos': 'CentOS', 'rhel': 'RHEL', 'sl': 'SL'}

def generate_header():
    '''Create the HTML object and its header'''
    css = VMU_TESTS_URL + 'vmu.css'
    html = Html(page_title='OSG VMU Automated Test Results', css_link=css)
    html.body.append_new_tag('h1').append('OSG VMU Automated Test Results')

    # Read description file
    label_file = open(RUN_DIR + '/run_label', 'r')
    label = label_file.read().strip()
    label_file.close()
    html.body.append_new_tag('h2').append('%s: %s ' % (TIMESTAMP, label.strip()))

    # Link back to latest nightly or manual run
    header_links = html.body.append_new_tag('p')
    if label == 'nightly':
        header_links.append_new_tag('a', href=VMU_TESTS_URL + 'latest.html').\
            append('&lt;&lt; Back to latest nightly').append_new_tag('br')
    else:
        header_links.append_new_tag('a', href=VMU_TESTS_URL + 'latest_manual.html').\
            append('&lt;&lt; Back to latest manual run').append_new_tag('br')

    # Link to the ticket of known OSG test bugs
    header_links.append_new_tag('a', 'https://jira.opensciencegrid.org/browse/SOFTWARE-1996').\
        append('Known issues with osg-test')

    # Create patch link if we applied any patches
    if os.stat(RUN_DIR + 'test-changes.patch').st_size != 0:
        header_links.append_new_tag('a', href=RUN_URL + 'test-changes.patch').\
            append('Click to view osg-test patches')

    # Create legend
    legend = ['PASS', 'FAIL', 'INSTALL', 'UPDATE', 'CLEANUP', 'IGNORE', 'TIMEOUT', 'DIE', 'NONE']
    legend_container = html.body.append_new_tag('p')
    for status in legend:
        legend_container.append_new_tag('span', class_='legend ' + status.lower()).append(status)
    legend_container.append_new_tag('p').append('* = Java pre-installed')
    legend_container.append_new_tag('p').append('&#0153; = Yum timeout failure')

    return html

def generate_table():
    '''Create the table that holds the results'''

    if SORT_BY == 'release':
        sort_header_name = 'OSG Release -> Upgrade &#9660;'
        mouseover_text = 'Sort by Package &#9660;'
        sort_link = RUN_URL+'packages.html'
        second_header_name = 'Packages'
    elif SORT_BY == 'package':
        sort_header_name = 'Packages &#9660;'
        mouseover_text = 'Sort by Release &#9660;'
        sort_link = RUN_URL+'results.html'
        second_header_name = 'OSG Release -> Upgrade'

    # Print first two column names describing row headers
    dver_row = Tag('tr')
    sort_header = dver_row.append_new_tag('th', rowspan='2', id='sort')
    sort_header.append_new_tag('span', id='hide_text').append(sort_header_name)
    sort_header.append_new_tag('a', href=sort_link, id='sort_link').\
        append(mouseover_text) # mouseover text/link
    dver_row.append_new_tag('th', rowspan='2').append(second_header_name)

    # Get number of platforms per dver so we know the length of the dver columns
    num_el = {}
    for platform in TEST_PARAMS['platform']:
        dver = platform[-1]
        try:
            num_el[dver] += 1
        except KeyError:
            num_el[dver] = 1

    # Create dver columns for dvers with at least 1 platform
    for dver in sorted(num_el):
        if num_el[dver] > 0:
            dver_row.append_new_tag('th', colspan=num_el[dver]).append("EL%s" % dver)

    # Print out all the OS flavors
    os_row = Tag('tr')
    for platform in TEST_PARAMS['platform']:
        os_row.append_new_tag('th').append(' ' + platform[:-1])

    header = Tag('thead').extend([dver_row, os_row])
    body = generate_table_body()
    table = Tag('table').extend([header, body])
    return table

def generate_table_body():
    '''Create the contents of the table'''
    results_file = open(RUN_DIR + '/combined-analysis.yaml', 'r')
    yaml_data = results_file.read()
    results_file.close()
    sorted_tests = sort_tests(yaml.load(yaml_data))

    if SORT_BY == 'release':
        sort_size = len(TEST_PARAMS['packages'])
        primary_sort_column = TEST_PARAMS['sources']
        secondary_sort_column = TEST_PARAMS['packages']
    elif SORT_BY == 'package':
        sort_size = len(TEST_PARAMS['sources'])
        primary_sort_column = TEST_PARAMS['packages']
        secondary_sort_column = TEST_PARAMS['sources']

    tbody = Tag('tbody')
    for primary_sort_val in primary_sort_column:
        tbody.append_new_tag('tr').append_new_tag('td', class_='divider') # divider between table header and contents
        trow = tbody.append_new_tag('tr')
        row_header = Tag('th', class_='yheader', valign='top')
        trow.append(row_header).append(primary_sort_val)
        num_rows = 0 # Used to set the height of the primary column header
        for secondary_sort_val in secondary_sort_column:
            # If no values in this row, skip it!
            empty_row = True
            rest_of_row = Tag('th', class_='yheader').append(secondary_sort_val)
            for platform in TEST_PARAMS['platform']:
                try:
                    if SORT_BY == 'release':
                            cell = generate_cell(sorted_tests[platform][primary_sort_val][secondary_sort_val])
                            empty_row = False
                    elif SORT_BY == 'package':
                            cell = generate_cell(sorted_tests[platform][secondary_sort_val][primary_sort_val])
                            empty_row = False
                except KeyError:
                    cell = Tag('td', class_='result none', align='center') # did not have a test for these params
                rest_of_row.append(cell)
            if not empty_row:
                trow.append(rest_of_row)
                num_rows += 1
                trow.append_new_tag('tr') # divider between rows
        row_header.set('rowspan',num_rows)
    return tbody

def generate_cell(run):
    '''Inspect a specific test run and parse out interesting information'''
    run_url_output_dir = RUN_URL + run['job_serial']

    # Generic info for each run
    mouseover_text = '<b>Hostname</b>: ' + run['host_name'] + '</br>' + \
        '<b>Host IP</b>: ' + run['host_address'] + '</br>' + \
        '<b>Job ID:</b> ' + str(run['job_id']) + '</br>' + \
        '<b>Job Serial</b>: ' + run['job_serial'] + '</br>'

    if run['run_status'] == 0:
        # Info for all runs of osg-test
        osg_test_version = re.sub(r'yum.*(\d+\.\d+\.\d+-\d+).*', r'\1', run['osg_test_version'])
        mouseover_text += '<b>VM Creation Date</b>: ' + run['vm_creation_date'] + '</br>' + \
            '<b>VM IO Free Space</b>: ' + run['io_free_size'] + '</br>' + \
            '<b>Run Dir</b>: ' + run['run_directory'] + '/output-' + run['job_serial'] + '</br>' + \
            '<b>Guest IP</b>: ' + run['guest_address'] + '</br>' + \
            '<b>OSG Test Version</b>: ' + osg_test_version + '</br>' + \
            '<b>Start Time</b>: ' + str(run['start_time']) + '</br>' + \
            '<b>Run Time</b>: ' + str(run['run_time'])
        # and for the failures...
        if run['tests_messages']:
            mouseover_text += '</br><b>Failures:</b>'
            for test in run['tests_messages']:
                filename, test, module, status, msg = test.split('|')
                mouseover_text += '</br><b>&emsp;%s:</b> %s (%s,%s): %s' % (status, test, filename, module, msg)

        # Construct link tag
        fail_count = run['tests_failed'] + run['tests_error'] + run['tests_bad_skip']
        test_log_path = glob('%soutput-%s/output/osg-test*.log' % (RUN_DIR, run['job_serial']))[0]
        test_log_filename = os.path.basename(test_log_path)
        link_location = '%s/%s' % (run_url_output_dir, test_log_filename)

        try:
            status_regex = r'(install|update|timeout)\s*(yum_timeout)?'
            status, yum_timeout = re.match(status_regex, run['osg_test_status']).groups()
            if yum_timeout:
                link_text = status.upper() + '&#0153;'
            else:
                link_text = status.upper()
            link = Tag('a', href=link_location).append(link_text)
        except AttributeError:
            link = Tag('a', href=link_location).append("%s %s %s" % (run['tests_ok'], run['tests_ok_skip'], fail_count))
    else:
        mouseover_text += '<b>Run Summary</b>: ' + run['run_summary']
        link_location = run_url_output_dir + '/run-job.log'
        run['osg_test_status'] = 'die'
        link = Tag('a', href=link_location).append('DIED')

    # Construct html
    result_class = 'result ' + run['osg_test_status']
    link_div = Tag('div', class_='link').append(link)
    mouseover_div = Tag('div', class_='mouseover').append(mouseover_text)
    container = Tag('div', class_='data').extend((link_div, mouseover_div))
    return Tag('td', class_=result_class, align='center').append(container)

def merge_params(params_list):
    '''Combines multiple run parameters files into a single dictionary (eliminating duplicates)'''
    primary = params_list.pop(0)
    for param in primary.iterkeys():
        for secondary in params_list:
            primary[param] += [val for val in secondary[param] if val not in primary[param]]
    return primary

def sort_platforms_by_dver(platform_list):
    '''Sorts the OS's by dver so that we know which column to put each run
     Assumes the OS's have the format: <flavor>_<dver>_<arch>'''
    dvers = {}
    for platform in platform_list:
        translated_platform = vmu.canonical_os_string(platform)
        dver = translated_platform[-1]
        try:
            dvers[dver].append(translated_platform)
        except KeyError:
            dvers[dver] = [translated_platform]
    platforms = []
    for dver in sorted(dvers):
        platforms += dvers[dver]
    return platforms

def pkg_list_to_string(packages):
    '''Translate package list into a string'''
    translated_pkgs = []
    for package_set in packages:
        concat_pkgs = string.join(package_set, ', ')
        translated_pkgs.append(vmu.canonical_pkg_string(concat_pkgs))
    return translated_pkgs

def sort_tests(tests):
    '''Sort each test into a nested dictionary for easier population of the results table'''
    sorted_tests = dict()
    for test in tests:
        platform = vmu.canonical_os_string(test['os_release'])
        src = vmu.canonical_src_string(test['param_sources'])
        pkg = vmu.canonical_pkg_string(test['param_packages'])
        try:
            sorted_tests[platform][src][pkg] = test
        except KeyError:
            try:
                sorted_tests[platform][src] = {pkg: test}
            except KeyError:
                sorted_tests[platform] = {src: {pkg: test}}
    return sorted_tests

if __name__ == "__main__":

    # Define paths
    SCRIPT_NAME = os.path.basename(sys.argv.pop(0))

    usage_text = "usage: %s [-s <sort>|-h] RUN-DIR\n" % (SCRIPT_NAME)
    help_text = usage_text + "\t-s\tSort results by 'release' or 'package'. Defaults to 'release'." \
                + " \n\t-h\tPrint this help message\n"

    # Process options
    SORT_BY = 'release'
    while len(sys.argv) > 1:
        arg = sys.argv.pop(0)
        if arg == '-h':
            vmu.die(help_text, 0)
        elif arg == '-s':
            SORT_BY = sys.argv.pop(0)
            if SORT_BY != 'release' and SORT_BY != 'package':
                bad_sort_text = "Unrecognized sort option: %s\n\n" % SORT_BY
                vmu.die(bad_sort_text + help_text)
        else:
            bad_option_text = "Unrecognized option %s\n\n" % arg
            vmu.die(bad_option_text + help_text)

    # Process arguments
    try:
        RUN_DIR = os.path.abspath(sys.argv.pop()) + '/'
    except IndexError:
        vmu.die(usage_text)
    if not os.path.exists(RUN_DIR):
        vmu.die('%s: run directory "%s" does not exist\n' % (SCRIPT_NAME, RUN_DIR))

    TIMESTAMP_REGEX = re.search(r'run-(\d*-\d*)', RUN_DIR)
    try:
        TIMESTAMP = TIMESTAMP_REGEX.group(1)
        RUN_URL = VMU_TESTS_URL + TIMESTAMP + "/"
    except AttributeError:
        vmu.die('%s: could not get timestamp of run directory "%s"\n' % (SCRIPT_NAME, RUN_DIR))

    # Read, sort, and translate test parameters
    params = vmu.load_run_params(RUN_DIR + 'parameters.d')
    TEST_PARAMS = merge_params(params)
    TEST_PARAMS['platform'] = sort_platforms_by_dver(TEST_PARAMS['platform'])
    TEST_PARAMS['packages'] = sorted(pkg_list_to_string(TEST_PARAMS['packages']))

    sources = []
    for source in TEST_PARAMS['sources']:
        sources.append(vmu.canonical_src_string(source))
    TEST_PARAMS['sources'] = sources

    # Construct and print results
    HTML = generate_header()
    TABLE = generate_table()
    HTML.body.append(TABLE)
    sys.stdout.write(str(HTML))
