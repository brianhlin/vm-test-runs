#!/usr/bin/python

import re
import os
import string
import itertools
import yaml
import taglib
from taglib import Tag
from glob import glob

CSS_URI =  "http://vdt.cs.wisc.edu/tests/vmu.css"
m = re.search(r'run-(\d*-\d*)', os.getcwd())
timestamp = m.group(1)
vmu_tests_url = "http://vdt.cs.wisc.edu/tests/"
run_url = vmu_tests_url + timestamp + "/"
repo_filename = "results.html"
pkg_filename = "packages.html" 
homepage = run_url +  repo_filename
pkg_organized_homepage = run_url + pkg_filename

os_translation = {'centos': 'CentOS', 'rhel': 'Red Hat', 'sl': 'Scientific'}

def create_header_and_table():
    html = taglib.Html(page_title='OSG VMU Automated Test Results', css_link=CSS_URI)
    html.body.append_new_tag('h1').append('OSG VMU Automated Test Results')

    # Read description file
    f = open('run_label', 'r')
    label = f.read().strip()
    f.close()
    html.body.append_new_tag('h2').append('%s: %s ' % (timestamp, label.strip()))

    header_links = html.body.append_new_tag('p')

    # Link back to latest nightly or manual run
    if label == 'nightly':
        header_links.append_new_tag('a', href = vmu_tests_url + 'latest.html').\
            append('&lt;&lt; Back to latest nightly').append_new_tag('br')
    else:
        header_links.append_new_tag('a', href = vmu_tests_url + 'latest_manual.html').\
            append('&lt;&lt; Back to latest manual run').append_new_tag('br')

    # Create patch link if we applied any patches
    if os.stat('test-changes.patch').st_size != 0:
        header_links.append_new_tag('a', href = run_url + 'test-changes.patch').\
            append('Click to view osg-test patches')

    # Create cell color legend
    legend = ['PASS', 'FAIL', 'INSTALL', 'UPDATE', 'CLEANUP', 'IGNORED', 'TIMEOUT', 'DIED']
    legend_container = html.body.append_new_tag('p')
    for status in legend:
        legend_container.append_new_tag('span', class_ = 'legend ' + status.lower()).append(status)


    table = html.body.append_new_tag('table')
    return html, table

def sort_platforms_by_dver(platform_list):
    # Sorts the OS's by dver so that we know which column to put each run
    # Assumes the OS's have the format: <flavor>_<dver>_<arch>
    
    # Sort platforms into different dver buckets
    el = {}
    for platform in platform_list:
        m = re.search('_(\d+)_', platform)
        try:
            el[m.group(1)].append(platform)
        except KeyError:
            el[m.group(1)] = [platform]

    # Add them all into one list
    del platform_list[:] # clear list in place
    for dver in sorted(el):
        platform_list += el[dver]

def concat_packages(packages):
    for idx, package_set in enumerate(packages):
        packages[idx] = string.join(package_set, ', ')
    
def read_source_params(sources_list):
    """
    Generate source_translation from sources attribute of test_params. Sources can take the following forms:
    '3.1; osg' # 3.1 Release
    '3.2; osg > osg-testing' # 3.2 Release ->  3.2 Testing
    '3.1; osg > 3.2/osg' # 3.1 Release -> 3.2 Release
    'trunk; 3.2; osg-testing' # 3.2 Testing (TRUNK)
    """
    source_translation = {}
    re_sources = re.compile(r'(trunk)?[; ]*(\d.\d)[; ]*([\w-]*)[> ]*(\d.\d)?\/?([\w-]+)?')
    for source in sources_list:
        result = re.sub(r'\s*>\s*', ' -> ', source)
        result = re.sub(r'osg-minefield', 'Minefield', result)
        result = re.sub(r'osg-development', 'Development', result)
        result = re.sub(r'osg-testing', 'Testing', result)
        result = re.sub(r'osg-prerelease', 'Prerelease', result)
        result = re.sub(r'osg-upcoming', 'Upcoming', result)
        result = re.sub(r'osg-upcoming-testing', 'Upcoming Testing', result)
        result = re.sub(r'osg', 'Release', result) # Must come after other repos
        result = re.sub(r';', '', result)
        result = re.sub(r'/', ' ', result)
        result = re.sub(r',', ' + ', result)
        result = re.sub(r'^(\d+\.\d+)(.*-> )(?!\d)', '\\1\\2\\1 ', result) # Duplicate release series, when needed
        result = re.sub(r'^trunk\s*(.*)$', '\\1 (TRUNK)', result)
        source_translation[source] = result
    return source_translation

def make_data_grid(runs, test_params, organization_scheme='repos'):
    num_rows = range(0, len(runs)/len(test_params['platform'])) 
    organized_runs = [[None] * len(test_params['platform']) for i in num_rows] # Create a 2D array to hold the runs
    for run in runs:
        # Find column value in the grid
        for idx, platform in enumerate(test_params['platform']):
            m = re.match('([^_]*)_(\d)_', platform)
            os, dver = m.groups()
            if (re.match(os_translation[os], run['os_release']) and
                re.search(' %s\.' % dver, run['os_release'])):
                column = idx
                break
            
        # Find row value in the grid
        for idx, package in enumerate(test_params['packages']):
            if package == run['param_packages']:
                package_idx = idx
                break

        for idx, repo in enumerate(test_params['sources']):
            if repo == run['param_sources']:
                repo_idx = idx
                break

        if organization_scheme == 'packages':
            row = repo_idx + package_idx * len(test_params['sources'])
        else:
            row = package_idx + repo_idx * len(test_params['packages'])

        organized_runs[row][column] = run
    return organized_runs

def create_table_header(table, organization_scheme='repos'):
    if organization_scheme == 'packages':
        sort_link = homepage
        sort_link_text = 'Sort by Release &#9660;'
        first_column_text = 'Parent Package &#9660;'
        second_column_text = 'OSG Release/Upgrade'
    else:
        sort_link = pkg_organized_homepage
        sort_link_text = 'Sort by Package &#9660;'
        first_column_text = 'OSG Release/Upgrade &#9660;'
        second_column_text = 'Parent Package'

    header = table.append_new_tag("thead")
    row_1 = header.append_new_tag("tr")
    th = row_1.append_new_tag("th", rowspan="2", id = 'sort')
    th.append_new_tag('span', id = 'hide_text').append(first_column_text)
    th.append_new_tag('a', href=sort_link, id = 'sort_link').\
        append(sort_link_text) # mouseover text/link
    row_1.append_new_tag("th", rowspan="2").append(second_column_text)

    # Get number of platforms per dver so we know the length of the dver columns
    num_el = {}
    for platform in test_params['platform']:
        m =  re.search('_(\d+)_', platform)
        try:
            num_el[m.group(1)] += 1
        except KeyError:
            num_el[m.group(1)] = 1

    # If we have at least 1 platform in a dver, we should create the dver column
    for dver in sorted(num_el):
        if num_el[dver] > 0:
            row_1.append_new_tag("th", colspan=num_el[dver]).append("EL%s" % dver)

    # Print out all the OS flavors
    row_2 = header.append_new_tag("tr")
    for platform in test_params['platform']:
        m = re.match('([^_]*)', platform)
        row_2.append_new_tag("th").append(os_translation[m.group(1)])

    return table

def populate_table_data(table, data, test_params, organization_scheme='repos'):
    source_translation = read_source_params(test_params['sources'])
    pkg_translation = {'osg-tested-internal':'Everything',
                       'condor.x86_64, osg-ce-condor, rsv':'Condor',
                       'osg-gridftp, edg-mkgridmap, rsv':'GridFTP',
                       'osg-se-bestman, rsv':'BeStMan',
                       'osg-voms, rsv':'VOMS',
                       'osg-gums, rsv':'GUMS'}

    if organization_scheme == 'packages':
        outer_org = test_params['packages']
        inner_org = test_params['sources']
        outer_translation = pkg_translation
        inner_translation = source_translation
    else:
        outer_org = test_params['sources']
        inner_org = test_params['packages']
        outer_translation = source_translation
        inner_translation = pkg_translation

    tbody = table.append_new_tag('tbody')

    # Every time we finish looping over the inner organization scheme,
    # we need to move onto the next item in the outer organization scheme.
    for row_tuple, inner_value in itertools.izip(enumerate(data), itertools.cycle(inner_org)):
        row_num = row_tuple[0]
        data = row_tuple[1]
        rowspan_size = len(inner_org)
        if row_num % rowspan_size == 0:
            tbody.append_new_tag('tr').append_new_tag('td', class_ = 'divider')
            trow = tbody.append_new_tag('tr')
            outer_value = outer_org[row_num/rowspan_size]
            try:
                translated_outer_value = outer_translation[outer_value]
            except KeyError:
                # If we don't have a translation for the value, we should just use what we were given
                translated_outer_value = outer_value
            trow.append_new_tag('th', valign='top', rowspan=rowspan_size).append(translated_outer_value)
        else:
            trow = tbody.append_new_tag('tr')
        try:
            translated_inner_value = inner_translation[inner_value]
        except KeyError:
            # If we don't have a translation for the value, we should just use what we were given
            translated_inner_value = inner_value
        trow.append_new_tag('th').append(translated_inner_value)
        for cell in data:
            trow.append(get_cell_contents(cell))

def get_cell_contents(run):
    run_dir = run_url + run['job_serial']
    
    # Generic info for each run
    mouseover_text = '<b>Hostname</b>: ' + run['host_name'] + '</br>' + \
        '<b>Host IP</b>: ' + run['host_address'] + '</br>' + \
        '<b>Job ID:</b> ' + str(run['job_id']) + '</br>' + \
        '<b>Job Serial</b>: ' + run['job_serial'] + '</br>'

    if run['run_status'] == 0:
        # Info for all runs of osg-test
        osg_test_version = re.sub('yum.*(\d+\.\d+\.\d+-\d+).*', '\\1', run['osg_test_version'])
        mouseover_text = mouseover_text + \
            '<b>Run Dir</b>: ' + run['run_directory'] + '/output-' + run['job_serial'] + '</br>' + \
            '<b>Guest IP</b>: ' + run['guest_address'] + '</br>' + \
            '<b>OSG Test Version</b>: ' + osg_test_version + '</br>' + \
            '<b>Start Time</b>: ' + str(run['start_time']) + '</br>' + \
            '<b>Run Time</b>: ' + str(run['run_time'])
        # and for the failures...
        if run['tests_messages']:
            mouseover_text = mouseover_text + '</br><b>Failures:</b>'
            for test in run['tests_messages']:
                filename, test, module, status, msg = test.split('|')
                mouseover_text = mouseover_text + \
                    '</br><b>&emsp;%s:</b> %s (%s,%s): %s' % (status, test, filename, module, msg)
        
        # Construct link tag
        success_count = run['tests_ok']
        skip_count = run['tests_ok_skip']
        fail_count =  run['tests_failed'] + run['tests_error'] + run['tests_bad_skip']

        test_log_path = glob('output-%s/output/osg-test*.log' % run['job_serial'])[0]
        test_log_filename = os.path.basename(test_log_path)
        link_location = '%s/%s' % (run_dir, test_log_filename)

        if run['osg_test_status'] == 'timeout':
            link = Tag('a', href=link_location).append('TIMEOUT')
        elif run['osg_test_status'] == 'install':
            link = Tag('a', href=link_location).append('INSTALL')
        elif run['osg_test_status'] == 'update':
            link = Tag('a', href=link_location).append('UPDATE')
        else:
            link = Tag('a', href=link_location).append("%s %s %s" % (success_count, skip_count, fail_count))
    else:
        mouseover_text = mouseover_text + '<b>Run Summary</b>: ' + run['run_summary']
        link_location = run_dir + '/run-job.log'
        run['osg_test_status'] = 'die'
        link = Tag('a', href = link_location).append('DIED')

    # Construct html
    result_class = 'result ' + run['osg_test_status']        
    link_div = Tag('div', class_ = 'link').append(link)
    mouseover_div = Tag('div', class_ = 'mouseover').append(mouseover_text)        
    container = Tag('div', class_ = 'data').extend((link_div, mouseover_div))
    return Tag('td', class_ = result_class, align = 'center').append(container)

def print_html_to_file(html, filename):
    f = open(filename, 'w')
    f.write(str(html))
    f.close()

if __name__ == "__main__":
    # setup html objects
    html_repo, table_repo = create_header_and_table()
    html_pkg, table_pkg = create_header_and_table()

    # Read test parameters
    f = open('test-parameters.yaml', 'r')
    yaml_data = f.read()
    f.close()
    test_params = yaml.load(yaml_data)
    sort_platforms_by_dver(test_params['platform'])
    concat_packages(test_params['packages'])

    # Map runs to their rows
    f = open('combined-analysis.yaml', 'r')
    yaml_data = f.read()
    f.close()
    runs = yaml.load(yaml_data)

    # Create and print repo organized html
    repo_organized_runs = make_data_grid(runs, test_params)
    populate_table_data(create_table_header(table_repo),
                        repo_organized_runs,
                        test_params)
    print_html_to_file(html_repo, repo_filename)
    
    # Create and print pkg organized html
    pkg_organized_runs = make_data_grid(runs, test_params, organization_scheme='packages')
    populate_table_data(create_table_header(table_pkg, organization_scheme='packages'),
                        pkg_organized_runs,
                        test_params,
                        organization_scheme='packages')
    print_html_to_file(html_pkg, pkg_filename)
