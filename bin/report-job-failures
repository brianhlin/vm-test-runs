#!/usr/bin/python

import re
import smtplib
import time
import os

RECIPIENTS = ('Brian Lin <blin@cs.wisc.edu>',
              'HTCondor Infrastructure <htcondor-inf@cs.wisc.edu>')

# Adapted from Tim's email-analysis script, which was adapted from Mat's aggregator/emailer.py script
def mail_message(subject, message, recipients):
    from_addr = 'OSG Tests <condor@osg-sw-submit.chtc.wisc.edu>'
    payload = 'Subject: %s\r\n' % (subject)
    payload += 'From: %s\r\n' % (from_addr)
    payload += 'To: %s\r\n' % (', '.join(recipients))
    payload += '\r\n'
    payload += message
    smtp = smtplib.SMTP('smtp.wiscmail.wisc.edu')
    smtp.sendmail(from_addr, recipients, payload)
    smtp.quit()

def parse_job_log(logfile):
    f = open(logfile, 'r')
    job_log = f.read()
    f.close()

    messages = {}
    failed_jobs = {}
    
    for m in re.finditer(r'^(007 .*?)^\.\.\.', job_log, re.MULTILINE | re.DOTALL):
        error_lines = m.group(1).split('\n')
        banner_match = re.search(r'^007 \((\d+\.\d+.\d+)\) (.*?) Shadow exception!', error_lines[0].strip())
        job_id, timestamp = banner_match.group(1, 2)

        # The same job can fail multiple times, so for the instance where an error
        # is missing a hostname, we have to keep track of how many times the job has
        # failed to find the corresponding log message with an IP address.
        if job_id in failed_jobs.keys():
            failed_jobs[job_id] += 1
        else:
            failed_jobs[job_id] = 0

        text_match = re.search(r'Error from slot\d+@(.*?): (.*)', error_lines[1].strip())
        try:
            hostname, message = text_match.group(1, 2)
        except AttributeError:
            # Ignore shadow exceptions that don't follow the 'Error from...' format
            pass
        else:
            # Sometimes Condor comes up before it knows its hostname so we have to
            # find the IP of the machine that the job landed on.
            if hostname == '':
                regex_string = r'^001 \(%s\).*?Job executing on host: <(.*?):\d+>' % job_id
                ip_matches = re.findall(regex_string, job_log, re.MULTILINE)
                machine_id = ip_matches[failed_jobs[job_id]] 
            else:
                machine_id = hostname
                
            event = (job_id, timestamp)
            if messages.has_key(message):
                if messages[message].has_key(machine_id):
                    messages[message][machine_id].append(event)
                else:
                    messages[message][machine_id] = [event]
            else:
                messages[message] = {machine_id: [event]}

    return messages

def construct_email(messages):
    body = '''In the OSG VM universe test run today, the following shadow exceptions
occurred on machines that have 'HasVirshDefaultNetwork = true'.  Often, these errors
indicate a broken libvirt, dnsmasq, firewall, or other hypervisor configuration issue.
The counts are total exceptions per hostname.
'''
        
    for message, failures in messages.items():
        body += "\nFailure: %s\n" % message
        for hostname in failures:
            times = 'times'
            if len(failures[hostname]) == 1:
                times = 'time'
            body += "  * %d %s on %s\n" % (len(failures[hostname]), times, hostname)
                
    body += '''
Have a nice day! (^_^)

-- Tim C.'''

    return body

if __name__ == "__main__":
    failures = parse_job_log('osg-test.log')
    if failures:
        message = construct_email(failures)
        run_time = time.localtime(os.path.getctime('osg-test.log'))
        mail_message('VM universe machine failures - ' + time.strftime('%F %H:%M', run_time), message, RECIPIENTS)
