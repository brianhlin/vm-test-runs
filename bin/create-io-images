#!/usr/bin/python

import glob
import os
import re
import shutil
import subprocess
import sys
import tempfile
import vmu

def run_command(command, shell=False):
    # Preprocess command
    if shell:
        if not isinstance(command, str):
            command = ' '.join(command)
    elif not (isinstance(command, list) or isinstance(command, tuple)):
        raise TypeError, 'Need list or tuple, got %s' % (repr(command))

    # Run and return command
    p = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, shell=shell)
    (stdout, stderr) = p.communicate()
    return (p.returncode, stdout, stderr)


def make_source_tarball_from_github(package, repo='opensciencegrid', branch='master'):
    """
    Generate a tarball containing the bare github clone of 'package' using the
    'branch' from 'repo'.

    package: name of the package on github
    repo: source github repository
    branch: source branch or tag
    """
    source_dir_name = package + '-git'
    source_tarball_name = source_dir_name + '.tar.gz'
    # Return immediately if the source tarball seems to exist already
    if os.path.exists(source_tarball_name):
        return source_tarball_name

    # Clone the repo into a temporary directory
    temp_directory = tempfile.mkdtemp()
    clone_directory = os.path.join(temp_directory, source_dir_name + '.git')
    command = ('git', 'clone', '--bare', 'https://github.com/%s/%s' % (repo, package), clone_directory)
    (exit_status, stdout, stderr) = run_command(command)
    if exit_status != 0:
        print 'git clone failed with exit status %d' % exit_status
        print stdout
        print stderr
        sys.exit(1)

    # Make source tarball from the specified branch
    print 'Making "%s" from "%s"' % (source_tarball_name, clone_directory)
    command = ('git', '--git-dir=' + clone_directory,
               'archive', '--prefix=' + source_dir_name + '/', '--output=' + source_tarball_name,
               branch)
    (exit_status, stdout, stderr) = run_command(command)
    if exit_status != 0:
        print 'git archive failed with exit status %d' % exit_status
        print stdout
        print stderr
        sys.exit(1)

    # Clean up
    shutil.rmtree(temp_directory)

    return source_tarball_name


def create_image(config_filename):
    f = open(config_filename, 'r')
    config_contents = f.read()
    f.close()

    serial_number = re.search(r'(\d+)', config_filename).group(1)
    image_filename = 'input-image-%s.dsk' % (serial_number)

    if contents_to_filename.has_key(config_contents):
        print 'Linking from "%s" -> "%s"' % (contents_to_filename[config_contents], image_filename)
        os.link(contents_to_filename[config_contents], image_filename)

    else:
        image_directory = tempfile.mkdtemp()

        shutil.copy(os.path.join(vmu.RUN_DIR, 'bin/run-job'), image_directory)

        input_directory = os.path.join(image_directory, 'input')
        os.mkdir(input_directory)
        shutil.copy(os.path.join(vmu.RUN_DIR, 'osg-test.patch'), input_directory)
        shutil.copy(os.path.join(vmu.RUN_DIR, 'test-changes.patch'), input_directory)
        shutil.copy(os.path.join(vmu.RUN_DIR, 'osg-release.patch'), input_directory)
        shutil.copy(config_filename, os.path.join(input_directory, 'osg-test.conf'))
        for rpm in glob.glob(os.path.join(vmu.RUN_DIR, 'osg-test-*.rpm')):
            shutil.copy(rpm, input_directory)

        tarballs = []
        try:
            # Clone osg-test from source
            repo, branch = re.search(r'testsource = (.*):(.*)', config_contents).groups()
            tarballs.append(make_source_tarball_from_github('osg-test', repo, branch))
            tarballs.append(make_source_tarball_from_github('osg-ca-generator'))
        except AttributeError:
            # user did not request osg-test from source i.e. install from yum repos instead
            pass
        for tarball_name in tarballs:
            shutil.copy(tarball_name, input_directory)


        os.mkdir(os.path.join(image_directory, 'output'))

        print 'Making "%s" from "%s"' % (image_filename, image_directory)
        os.system('virt-make-fs --size=10M --format=raw %s %s' % (image_directory, image_filename))
        shutil.rmtree(image_directory)

        contents_to_filename[config_contents] = image_filename

# ------------------------------------------------------------------------------

if __name__ == '__main__':

    # Define paths
    script_name = os.path.basename(sys.argv[0])

    # Process command-line arguments
    if len(sys.argv) != 1:
        vmu.die('usage: %s' % (script_name))

    # Write files
    contents_to_filename = {}
    for config_filename in sorted(glob.glob('osg-test-*.conf')):
        create_image(config_filename)
        os.remove(config_filename)
