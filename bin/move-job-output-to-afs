#!/usr/bin/env python
# (ignore bad script name) pylint: disable=C0103
"""
A script for moving OSG VM Universe tests from a temporary directory to AFS.
Designed to be run from cron and includes safety features such as a timeout,
locking, and email notifications on failure.
"""

import safe_cron_job

import os
import re
import glob
import shutil
import datetime
import errno
import sys
import shutil
import subprocess
from optparse import OptionParser

########################################################################
# Defaults
DEFAULT_DEST_DIR = '/p/vdt/public/html/tests'
DEFAULT_SOURCE_DIR = '/nobackup/osg/vmu-test-results'
DEFAULT_NOTIFY_ADDRS = ['matyas@cs.wisc.edu', 'blin@cs.wisc.edu']
DEFAULT_TIMEOUT_MINS = 60
DEFAULT_LOCKFILE_PATH = os.path.join(os.getenv('HOME'), '.move-job-output-to-afs.lock')
DEFAULT_CLEAN_THRESHOLD_PERCENT = 90.0
DEFAULT_DATE_FORMAT = '%Y%m%d-%H%M'
#
########################################################################


def errmsg(text, *args, **kwargs):
    "Print a message to stderr"
    return sys.stderr.write(text + '\n', *args, **kwargs)

def get_options(argv):
    "Parse, validate, and transform command-line options"
    parser = OptionParser("%prog [options]\n")

    parser.add_option("--source-dir", metavar="PATH", default=DEFAULT_SOURCE_DIR,
                      help="Where to move job output data from")
    parser.add_option("--dest-dir", metavar="PATH", default=DEFAULT_DEST_DIR,
                      help="Where to move job output data to")
    parser.add_option("--clean-threshold", metavar="PERCENT", default=DEFAULT_CLEAN_THRESHOLD_PERCENT, type="float",
                      help="The percent disk used after which old runs should be deleted")
    parser.add_option_group(safe_cron_job.get_cron_job_parser_group(parser, DEFAULT_TIMEOUT_MINS, DEFAULT_LOCKFILE_PATH))
    options = parser.parse_args(argv[1:])[0] # raises SystemExit(2) on error

    return options


class MoveError(Exception):
    def __init__(self, run, message):
        Exception.__init__(self)
        self.run = run
        self.message = message

    def __str__(self):
        return "Move error for %s: %s" % (self.run, str(self.message))

class CleanError(Exception):
    def __init__(self, directory, message):
        Exception.__init__(self)
        self.directory = directory
        self.message = message

    def __str__(self):
        return "Error cleaning old runs under %s: %s" % (self.directory, str(self.message))

def run_directories(parent_directory):
    """A sorted list of the run directories under 'parent_directory'.
    All run directories are named '20YYmmdd-HHMM'

    """
    digit = "[0-9]"
    timestamp_glob = "20%s-%s" % (digit * 6, digit * 4)
    # Use normal string sort -- the timestamp format ensures entries will be in
    # chronological order
    return sorted(glob.glob(os.path.join(parent_directory, timestamp_glob)))

def backup_run_directories(parent_directory):
    """A sorted list of backed-up run directories under 'parent_directory'.
    These end with .move-save, and are created when a directory to be moved
    has the same name as an existing directory.

    """
    digit = "[0-9]"
    move_save_glob = "20%s-%s.move-save" % (digit * 6, digit * 4)
    return sorted(glob.glob(os.path.join(parent_directory, move_save_glob)))

def _disk_quota_percent_used(listquota_line):
    """Helper for decoding the output of 'fs listquota'. Takes a line such as:
    u.matyas-497381             20000000   12209872   61%          0%
    and returns the percentage of quota used (as a float, out of 100.0).
    Can return TypeError or IndexError if the line is not in the expected
    format.

    """
    line_split = re.split(r'\s+', listquota_line)
    quota = line_split[1]
    used = line_split[2]
    percent = (float(used) / float(quota)) * 100.0

    return percent

def is_disk_usage_above_threshold(directory, threshold):
    """Return True if the disk usage under 'directory' is above the threshold
    (in percent of disk quota). 'directory' must be on AFS. Uses 'fs listquota'
    to get the quota remaining.

    """
    listquota_proc = subprocess.Popen(
        ['/usr/bin/fs', 'listquota', directory], stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
    listquota_output = listquota_proc.communicate()[0].split("\n")
    if listquota_proc.returncode != 0:
        raise CleanError(
            directory, 'fs listquota returned %d. Output: %s' % (listquota_proc.returncode, listquota_output))

    # The second line contains the information
    try:
        return float(threshold) < _disk_quota_percent_used(listquota_output[1])
    except (TypeError, IndexError):
        raise CleanError(directory, 'fs listquota did not return expected output: %s' % listquota_output)


def auto_cleanup(runs_directory, threshold):
    """Remove old runs as necessary to keep the disk usage of the volume
    'runs_directory' is mounted on at or under 'threshold' percentage.
    Only removes run directories. Backup run directories (those that end with
    ".move-save") are removed first.

    Raise CleanError if anything goes wrong while trying to remove dirs, or
    if usage is still above threshold even after removing all run dirs.

    """
    num_removed = 0
    try:
        try:
            rundir_iter = iter(backup_run_directories(runs_directory) + run_directories(runs_directory))
            while is_disk_usage_above_threshold(runs_directory, threshold):
                shutil.rmtree(rundir_iter.next())
                num_removed += 1
        except EnvironmentError, err:
            raise CleanError(runs_directory, '%s' % str(err))
        except StopIteration:
            raise CleanError(runs_directory, 'Usage above threshold after cleaning')
    finally:
        print "%d old run dir(s) were removed." % num_removed

def move_runs(source_dir, dest_dir, cleanup_threshold=None):
    """Copy all the run directories from 'source_dir' to 'dest_dir' and, if
    successful, remove them from 'source_dir'.

    If 'cleanup_threshold' is given and positive, and 'dest_dir' is more full
    than cleanup_threshold% of quota, then remove run directories under
    'dest_dir' until that is no longer the case, or there are no more run
    directories to remove.

    Run directories under source_dir are named 20YYmmdd-HHMM (i.e. a timestamp).

    """
    try:
        # I don't trust floating point enough to compare against 0.0
        if cleanup_threshold > 0.01:
            auto_cleanup(dest_dir, cleanup_threshold)
    except CleanError, err:
        errmsg("%s\nWill attempt to move runs anyway." % str(err))

    num_errors = 0
    num_copied = 0
    run_dirs = run_directories(source_dir)
    for run_dir in run_dirs:
        try:
            if not os.path.isdir(run_dir):
                continue
            run_dir_base = os.path.basename(run_dir)
            run_dir_dest = os.path.join(dest_dir, run_dir_base)
            if os.path.exists(run_dir_dest):
                # Assuming a half-finished copy. Move it out of the way.
                backup_path = run_dir_dest + '.move-save'
                try:
                    if os.path.exists(backup_path):
                        shutil.rmtree(backup_path)
                    os.rename(run_dir_dest, backup_path)
                except EnvironmentError, err:
                    raise MoveError(run_dir, "Backup of %s to %s failed: %s" % (run_dir_dest, backup_path, str(err)))

            try:
                shutil.copytree(run_dir, run_dir_dest)
            except (shutil.Error, EnvironmentError), err:
                raise MoveError(run_dir, "Copy failed: %s" % str(err))
            try:
                shutil.rmtree(run_dir)
            except EnvironmentError, err:
                raise MoveError(run_dir, "Removal failed: %s" % str(err))
        except MoveError, err:
            errmsg(str(err))
            num_errors += 1
            continue
        num_copied += 1

    print "%d dir(s) were copied successfully." % num_copied
    print "%d dir(s) could not be copied." % num_errors

    create_latest_symlinks(dest_dir)
    
    if num_errors:
        return 1
    return 0

def create_latest_symlinks(dest_dir):
    """
    Find the latest automated and manual test runs and create symlinks to their
    results html files.
    """
    run_dirs = run_directories(dest_dir)
    run_dirs = map(os.path.basename, run_dirs)
    latest = datetime.datetime(1970, 01, 01, 0, 0)
    latest_manual = datetime.datetime(1970, 01, 01, 0, 0)
    latest_dir = None
    latest_manual_dir = None
    for run_dir in run_dirs:
        try:
            run_datetime = datetime.datetime.strptime(run_dir, DEFAULT_DATE_FORMAT)
        except ValueError:
            # This directory is named wrong; skip it
            continue
        label_file_name = os.path.join(dest_dir, run_dir, 'run_label')
        if os.path.exists(label_file_name):
            label_file = open(label_file_name, 'r')
            label = label_file.read()
            label_file.close()
            if re.match('nightly$', label.strip()) and run_datetime > latest:
                latest_dir = run_dir
                latest = run_datetime
            elif run_datetime > latest_manual:
                latest_manual = run_datetime
                latest_manual_dir = run_dir
        elif os.path.exists(os.path.join(dest_dir, run_dir, 'manual_run')) and run_datetime > latest_manual:
            latest_manual = run_datetime
            latest_manual_dir = run_dir
        elif run_datetime > latest:
            latest_dir = run_dir
            latest = run_datetime

    if latest_dir:
        create_symlink(latest_dir, dest_dir, 'latest.html')
    if latest_manual_dir:
        create_symlink(latest_manual_dir, dest_dir, 'latest_manual.html')

def create_symlink(run_dir, dest_dir, dest_file):
    "Safely create symlink to results html"
    link_src = os.path.join(dest_dir, run_dir, 'results.html')
    dest_path = os.path.join(dest_dir, dest_file)
    
    try:
        os.unlink(dest_path)
    except OSError, e:
        if e.errno != errno.ENOENT:
            raise e
    os.symlink(link_src, dest_path)

def main():
    """A wrapper around the rest of the logic to make sure this script can be
    safely used as a cron job"""
    script_name = os.path.basename(sys.argv[0])

    options = get_options(sys.argv)
    safe_cron_job_wrapper = \
        safe_cron_job.make_wrapper_from_options(options,
                                                default_notify=DEFAULT_NOTIFY_ADDRS,
                                                script_name=script_name)

    return safe_cron_job_wrapper.wrap_main(move_runs, options.source_dir, options.dest_dir, options.clean_threshold)

if "__main__" == __name__:
    sys.exit(main())

