#!/usr/bin/python

import itertools
import os
import re
import sys
import time

import vmu

BASE_IMAGE_PATH="/staging/osg-images"

DAG_FRAGMENT = '''
#########################
# Nodes {serial}
# Platform: {platform}
# Sources: {sources}
# Packages: {package_set}
#########################
JOB CreateImage{serial} create-io-image.sub
VARS CreateImage{serial} serial="{serial}"
RETRY CreateImage{serial} 3
CATEGORY CreateImage{serial} CreateImage

JOB TestRun{serial} single-test-run.sub
VARS TestRun{serial} serial="{serial}" platform="{platform}" jobpriority="{priority}"
PRIORITY TestRun{serial} {priority}
SCRIPT POST TestRun{serial} ../bin/write-job-id {serial} $JOBID

JOB ProcessResult{serial} process-job-output.sub
VARS ProcessResult{serial} serial="{serial}"

JOB CleanOutput{serial} clean-job-output.sub
VARS CleanOutput{serial} serial="{serial}"

PARENT CreateImage{serial} CHILD TestRun{serial}
PARENT TestRun{serial} CHILD ProcessResult{serial}
PARENT ProcessResult{serial} CHILD CleanOutput{serial}
'''

def generate_dag_fragment(serial, combo):
    platform, sources, package_set = combo

    priority = 0
    if 'osg-tested-internal' in package_set.packages:
        priority = 1

    return DAG_FRAGMENT.format(serial=serial,
                               platform=platform,
                               sources=sources,
                               priority=priority,
                               package_set=', '.join(package_set.packages))

def write_osg_test_configuration(serial, combo, directory, nightly=False):
    _, sources, package_set = combo
    with open(os.path.join(vmu.RUN_DIR, 'osg-test.conf'), 'r') as f:
        contents = f.read() + '\n'  # ensure newline in case user forgets it

    sources_parts = re.split(r'\s*;\s*', sources)
    if len(sources_parts) == 3:
        contents += 'testsource = %s\n' % (sources_parts[0])
        _, release_series, repositories = sources_parts
    else:
        release_series, repositories = sources_parts
    repo_parts = re.split(r'\s*>\s*', repositories)
    # Remove osg production from any part of the extra repos string
    extrarepos = re.sub(r'osg\s*,\s*', '', repo_parts[0])
    extrarepos = re.sub(r'[,\s]*osg(?!-)', '', extrarepos)
    # Don't add any extra repos if there aren't any
    if extrarepos:
        contents += 'extrarepos = %s\n' % (extrarepos)
    if len(repo_parts) > 1:
        update_parts = re.split(r'\s*/\s*', repo_parts[1])
        if len(update_parts) == 1:
            contents += 'updaterepos = %s\n' % (update_parts[0])
        else:
            contents += 'updaterelease = %s\n' % (update_parts[0])
            if update_parts[1] != 'osg':
                contents += 'updaterepos = %s\n' % (update_parts[1])

    contents += 'packages = %s\n' % (', '.join(package_set.packages))
    contents += 'series = %s\n' % (release_series)
    contents += 'sources = %s\n' % (sources)
    contents += 'selinux = %s\n' % package_set.selinux
    contents += 'nightly = %s\n' % nightly

    vmu.write_file(contents, os.path.join(directory, 'osg-test-%s.conf' % (serial)))


# ------------------------------------------------------------------------------
# MAIN
# ------------------------------------------------------------------------------

if __name__ == '__main__':

    # Define paths
    script_name = os.path.basename(sys.argv[0])

    # Process command-line arguments
    if len(sys.argv) != 2:
        vmu.die('usage: %s PARAMETER-DIR' % (script_name))
    param_dir = sys.argv[1]
    if not os.path.exists(param_dir):
        vmu.die('%s: parameter directory "%s" does not exist' % (script_name, param_dir))

    run_params = vmu.load_run_params(param_dir)
    vmu.flatten_run_params(run_params) # verify uniqueness of package sets + labels

    # Set up test run directory
    test_run_directory = os.getcwd()

    # Check if nightly
    nightly = vmu.run_label() == 'nightly'

    # Start DAG file
    dag_contents = '# osg-test run generated %s\n' % (time.strftime('%Y-%m-%d %H:%M'))
    dag_contents += 'CONFIG inner-dag.config\n'
    dag_contents += 'VARS ALL_NODES run_dir="%s"' % os.path.dirname(test_run_directory)

    # bail if there aren't corresponding VM images before writing any config
    for param_file in run_params:
        for platform in param_file['platforms']:
            image_path = os.path.join(BASE_IMAGE_PATH, platform + '_htcondor.dsk')
            if not os.path.exists(image_path):
                sys.exit("ERROR: Invalid platform (%s). Could not find %s" % (platform, image_path))

    # Run parameter sweep
    process = 0
    run_combos = [] # keep track of all combos to remove dupes
    for param_file in run_params:
        for combo in itertools.product(param_file['platforms'], param_file['sources'], param_file['package_sets']):
            if combo not in run_combos:
                run_combos.append(combo)
                serial = '%03d' % (process)
                dag_contents += generate_dag_fragment(serial, combo)
                write_osg_test_configuration(serial, combo, test_run_directory, nightly)
                process += 1

    dag_contents += '\n'
    dag_contents += '# Don\'t run too many simultaneous CreateImage jobs because they are I/O-heavy\n'
    dag_contents += '# and run on the local machine\n';
    dag_contents += 'MAXJOBS CreateImage 10\n'
    dag_contents += '# Allow DAG to complete successfully if any tests have failed\n'
    dag_contents += 'FINAL MarkDagSuccessful true.sub\n'
    vmu.write_file(dag_contents, os.path.join(test_run_directory, 'test-run.dag'))
