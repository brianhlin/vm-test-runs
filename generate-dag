#!/usr/bin/python

import itertools
import os
import re
import shutil
import sys
import time

import yaml


def die(message, code=1):
    sys.stderr.write(message + '\n')
    sys.exit(code)

def write_file(contents, file_path):
    f = open(file_path, 'w')
    f.write(contents)
    f.close()

def generate_dag_fragment(serial, combo):
    platform, repo, packages = combo
    node_name = 'TestRun' + serial

    priority = 0
    if 'osg-tested-internal' in packages:
        priority = 1

    contents = '\n'
    contents += '# Node %s: %s - %s - %s\n' % (serial, platform, repo, ', '.join(packages))
    contents += 'JOB %s single-test-run.sub\n' % (node_name)
    contents += 'VARS %s serial="%s" platform="%s" jobpriority="%d"\n' % (node_name, serial, platform, priority)
    contents += 'SCRIPT POST %s extract-job-output result-image-%s.qcow2 output-%s\n' % (node_name, serial, serial)
    if 'osg-tested-internal' in packages:
        contents += 'PRIORITY %s %d\n' % (node_name, priority)
    return contents

def write_osg_test_configuration(serial, combo, directory):
    platform, repo, packages = combo
    contents = '[Config]\n'
    contents += 'adduser = True\n'
    contents += 'dumpout = True\n'
    contents += 'verbose = True\n'
    contents += 'timeout = 14400\n'  # 4 hours
    contents += 'hostcert = True\n'
    release_series, repositories = re.split(r'\s*;\s*', repo)
    repo_parts = re.split(r'\s*>\s*', repositories)
    if repo_parts[0] != 'osg':
        contents += 'extrarepos = %s\n' % (repo_parts[0])
    if len(repo_parts) > 1:
        update_parts = re.split(r'\s*/\s*', repo_parts[1])
        if len(update_parts) == 1:
            contents += 'updaterepo = %s\n' % (update_parts[0])
        else:
            contents += 'updaterelease = %s\n' % (update_parts[0])
            if update_parts[1] != 'osg':
                contents += 'updaterepo = %s\n' % (update_parts[1])
    contents += 'packages = %s\n' % (', '.join(packages))
    contents += 'series = %s\n' % (release_series)
    write_file(contents, os.path.join(directory, 'osg-test-%s.conf' % (serial)))


# ------------------------------------------------------------------------------
# MAIN
# ------------------------------------------------------------------------------

if __name__ == '__main__':

    # Define paths
    script_name = os.path.basename(sys.argv[0])

    # Process command-line arguments
    if len(sys.argv) != 2:
        die('usage: %s PARAMETER-FILE' % (script_name))
    parameter_path = sys.argv[1]
    if not os.path.exists(parameter_path):
        die('%s: parameter file "%s" does not exist' % (script_name, parameter_path))

    # Load run parameters
    yaml_file = open(parameter_path)
    yaml_contents = yaml_file.read()
    yaml_file.close()
    run_params = yaml.load(yaml_contents)

    # Set up test run directory
    test_run_directory = os.getcwd()

    # Start DAG file
    dag_contents = '# osg-test run generated %s\n' % (time.strftime('%Y-%m-%d %H:%M'))
    dag_contents += 'CONFIG inner-dag.config\n'

    # Run parameter sweep
    process = 0
    for combo in itertools.product(run_params['platform'], run_params['repository'], run_params['packages']):
        serial = '%03d' % (process)
        dag_contents += generate_dag_fragment(serial, combo)
        write_osg_test_configuration(serial, combo, test_run_directory)
        process += 1
    write_file(dag_contents, os.path.join(test_run_directory, 'test-run.dag'))
