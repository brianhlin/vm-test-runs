#!/usr/bin/python

import glob
from operator import itemgetter
import os
import re
import sys

def test_run_dir_key(a):
    return '%s.%04s' % re.search(r'-(\d+)\.(\d+)$', a).group(1, 2)

def read_file(path):
    data_file = open(path, 'r')
    data = data_file.read()
    data_file.close()
    return data

def re_extract(regexp, data, flags=0, default=None, group=None):
    m = re.search(regexp, data, flags)
    if m is None:
        return default
    elif group is None:
        return m.groups()
    else:
        return m.group(group)

def cache_job_mappings(main_log):
    # Associate serial numbers with job IDs
    serial_to_job_id = {}
    for m in re.finditer(r'^000 \((\d{3}\.\d{3})\.\d+\) .*\n\s+DAG Node: TestRun(\d+)', main_log, re.MULTILINE):
        serial_to_job_id[m.group(2)] = m.group(1)

    # Associate job IDs with execute host IPs
    job_id_to_host_ip = {}
    for m in re.finditer(r'^001 \((\d{3}\.\d{3})\.\d+\) .* Job executing on host: <([^:]+):', main_log, re.MULTILINE):
        job_id_to_host_ip[m.group(1)] = m.group(2)

    return serial_to_job_id, job_id_to_host_ip

def extract_yum_repositories(osg_test_log):
    extra_repo = re_extract(r'^\s+-\s+Extra repos: +(\S+)$', osg_test_log, re.MULTILINE, group=1)
    if extra_repo is None:
        return 'osg repo'
    else:
        return '%s and osg repos' % (extra_repo)

def analyze_network():
    pass

# ------------------------------------------------------------------------------

# [TODO] add checking of argv
run_directory = sys.argv[1]

# Parse job log
main_log = read_file(os.path.join(run_directory, 'osg-test-cat.log'))
serial_to_job_id, job_id_to_host_ip = cache_job_mappings(main_log)

summary_re = re.compile(r'(Ran \d+ tests in .*)\s+((?:OK|FAILED)\s*\([^)]+\))')

test_run_dirs = sorted(glob.glob(os.path.join(run_directory, 'output-[0-9][0-9][0-9]')))
for test_run_dir in test_run_dirs:
    job_serial = re_extract(r'-(\d+)$', test_run_dir, group=1)

    # Get osg-test NVR
    run_job_log = read_file(os.path.join(test_run_dir, 'run-job.log'))
    envra_re = r'osg-test\.noarch\s+\d:([^-]+-[^.]+)\.osg\.el\d'
    osg_test_envra = re_extract(envra_re, run_job_log, default='(version unknown)', group=1)
    osg_test_version = 'osg-test ' + osg_test_envra

    # Get and simplify OS release string
    os_long_string = re_extract(r'cat /etc/redhat-release\n(.*?)\n==> OK', run_job_log, group=1)
    os_string = re.sub(r'release\s+', '', os_long_string)
    os_string = re.sub(r'\s*\(.*\)$', '', os_string)

    # Read osg-test output
    osg_test_logfile = glob.glob(os.path.join(test_run_dir, 'output', 'osg-test-*.log'))[0]
    print 'TEST JOB %s (%s)' % (job_serial, osg_test_logfile)
    osg_test_log = read_file(osg_test_logfile)
    if re.search(r'/mnt/user/run-job: .* osg-test: command not found', osg_test_log):
        print '  - osg-test not installed'
        print
        continue

    # Extract yum repositories
    yum_repo = extract_yum_repositories(osg_test_log)

    # Extract package list
    installed_string = re_extract(r'^\s+-\s+Install:\s+(.*)$', osg_test_log, re.MULTILINE, group=1)
    installed_list = re.split(r'\s*,\s*', installed_string)
    if len(installed_list) == 2:
        installed_string = ' and '.join(installed_list)
    elif len(installed_list) > 2:
        installed_string = ', '.join(installed_list[0:-1]) + ', and ' + installed_list[-1]

    # Extract summary statistics
    summary_lines = re_extract(summary_re, osg_test_log)
    tests_total = tests_failed = tests_error = tests_bad_skip = tests_ok_skip = 0
    if summary_lines is None:
        run_time = 0.0
        overall = 'KILLED'
    else:
        tests_total, run_time = re_extract(r'Ran (\d+) tests in ([\d.]+)s', summary_lines[0])
        tests_total = int(tests_total)
        run_time = float(run_time)
        summary = summary_lines[1]
        overall, details = re_extract(r'(OK|FAILED)\s*\(([^)]+)\)', summary_lines[1])
        if overall == 'OK':
            overall = 'PASSED'
        for detailed_count in re.split(r'\s*,\s*', details):
            label, value = detailed_count.split('=')
            if label == 'failures': tests_failed = int(value)
            elif label == 'errors': tests_error = int(value)
            elif label == 'badSkips': tests_bad_skip = int(value)
            elif label == 'okSkips': tests_ok_skip = int(value)
            else: raise ValueError()
    tests_ok = tests_total - (tests_failed + tests_error + tests_bad_skip + tests_ok_skip)

    # Extract start time
    start_time = re_extract(r'^Start time: (.*)$', osg_test_log, re.MULTILINE, group=1)

    # Extract problems
    problems = []
    for m in re.finditer(r'^(ERROR|FAIL): (\w+) \(osgtest\.tests\.(\w+)\.(\w+)\)', osg_test_log, re.MULTILINE):
        status, function, module, module_name = m.groups()
        problems.append((module, function, module_name, status, '-'))
    m = re.search(r'^=+\nBAD SKIPS:\n-+\n(.*?)\n\n', osg_test_log, re.MULTILINE | re.DOTALL)
    if m is not None:
        for n in re.finditer(r'^(\w+) \(osgtest\.tests\.(\w+)\.(\w+)\) (.*)$', m.group(1), re.MULTILINE):
            function, module, module_name, comment = n.groups()
            problems.append((module, function, module_name, 'SKIP', comment))

    # Print stuff
    print 'Ran %s on %s from the %s' % (osg_test_version, installed_string, yum_repo)
    print 'Ran on %s starting at %s and ran for %.1f seconds' % (os_string, start_time, run_time)
    print '%s: %d tests: %d ok, %d skip; %d fail, %d error, %d skip' % \
          (overall, tests_total, tests_ok, tests_ok_skip, tests_failed, tests_error, tests_bad_skip)
    for problem in sorted(problems, key=itemgetter(0, 1)):
        print '  - %-5s %s (%s) - %s (%s)' % (problem[3], problem[0], problem[2], problem[1], problem[4])
        
    print
